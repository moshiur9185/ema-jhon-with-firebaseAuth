{"ast":null,"code":"import React from 'react';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseConfig from \"../Login/firebase.config\";\nexport const initializeLoginFremwork = () => {\n  if (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n  } else {\n    firebase.app();\n  }\n};\nexport const handleGoogleSignIn = () => {\n  const googleProvider = new firebase.auth.GoogleAuthProvider();\n  return firebase.auth().signInWithPopup(googleProvider).then(res => {\n    const {\n      displayName,\n      photoURL,\n      email\n    } = res.user;\n    const singedInUser = {\n      isSignedIn: true,\n      name: displayName,\n      email: email,\n      photo: photoURL\n    };\n    return singedInUser; // console.log(displayName, email, photoURL, )\n  }).catch(err => {\n    console.log(err);\n    console.log(err.message);\n  });\n}; //google sign out\n\nexport const handleSignOut = () => {\n  return firebase.auth().signOut().then(res => {\n    const signedOutUser = {\n      isSignedIn: false,\n      name: '',\n      email: '',\n      photo: '',\n      success: false,\n      error: ''\n    };\n    return signedOutUser;\n  }).catch(err => {});\n}; // facebook login\n\nexport const handleFbSingUp = () => {\n  const fbProvider = new firebase.auth.FacebookAuthProvider();\n  return firebase.auth().signInWithPopup(fbProvider).then(res => {\n    //  @type {firebase.auth.OAuthCredential}\n    var credential = res.credential.accessToken;\n    var user = res.user;\n    return user;\n    console.log(user);\n  }).catch(error => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // The email of the user's account used.\n\n    var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    var credential = error.credential; // ...\n  });\n}; // export const createUserWithEmailAndPassword = () => {\n//     firebase.auth().createUserWithEmailAndPassword(user.email, user.password)\n//       .then((res) => {\n//         const newUserInfo = {...user};\n//         newUserInfo.error = '';\n//         newUserInfo.success = true;\n//         setUser(newUserInfo);\n//         updateUserName(user.name);\n//       })\n//       .catch((error) => { \n//         const newUserInfo = {...user};\n//         newUserInfo.error = error.message;\n//         newUserInfo.success = false;\n//         setUser(newUserInfo);\n//       });\n// }\n// export const signInWithEmailAndPassword =()=>{\n//     firebase.auth().signInWithEmailAndPassword(user.email, user.password)\n//       .then((res) => {\n//         const newUserInfo = {...user};\n//         newUserInfo.error = '';\n//         newUserInfo.success = true;\n//         setUser(newUserInfo);\n//         setLoggedInUser(newUserInfo);\n//         history.replace(from);\n//         console.log( 'sign in user info', res.user);\n//       })\n//       .catch((error) => {\n//         const newUserInfo = {...user};\n//         newUserInfo.error = error.message;\n//         newUserInfo.success = false;\n//         setUser(newUserInfo);\n//       });\n// }\n// const updateUserName = name => {\n//     const user = firebase.auth().currentUser;\n//       user.updateProfile({\n//         displayName: name,\n//       }).then(res => {\n//         // Update successful.\\\n//         console.log('Updated successfully')\n//       }).catch(error=> {\n//         // An error happened.\n//         console.log(error)\n//       });\n//   }","map":{"version":3,"sources":["/home/moshiur/Desktop/Web Development/projects/ema-john-router/src/componets/LoginManager/LoginManager.js"],"names":["React","firebase","firebaseConfig","initializeLoginFremwork","apps","length","initializeApp","app","handleGoogleSignIn","googleProvider","auth","GoogleAuthProvider","signInWithPopup","then","res","displayName","photoURL","email","user","singedInUser","isSignedIn","name","photo","catch","err","console","log","message","handleSignOut","signOut","signedOutUser","success","error","handleFbSingUp","fbProvider","FacebookAuthProvider","credential","accessToken","errorCode","code","errorMessage"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,OAAO,MAAMC,uBAAuB,GAAG,MAAM;AACzC,MAAI,CAACF,QAAQ,CAACG,IAAT,CAAcC,MAAnB,EAA2B;AACvBJ,IAAAA,QAAQ,CAACK,aAAT,CAAuBJ,cAAvB;AACF,GAFF,MAEO;AACHD,IAAAA,QAAQ,CAACM,GAAT;AACF;AACL,CANM;AAOP,OAAO,MAAMC,kBAAkB,GAAE,MAAI;AACjC,QAAMC,cAAc,GAAG,IAAIR,QAAQ,CAACS,IAAT,CAAcC,kBAAlB,EAAvB;AACA,SAAOV,QAAQ,CAACS,IAAT,GAAgBE,eAAhB,CAAgCH,cAAhC,EACNI,IADM,CACDC,GAAG,IAAE;AACT,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA,QAAd;AAAwBC,MAAAA;AAAxB,QAAgCH,GAAG,CAACI,IAA1C;AACA,UAAMC,YAAY,GAAG;AACnBC,MAAAA,UAAU,EAAG,IADM;AAEnBC,MAAAA,IAAI,EAAGN,WAFY;AAGnBE,MAAAA,KAAK,EAAGA,KAHW;AAInBK,MAAAA,KAAK,EAAGN;AAJW,KAArB;AAMA,WAAOG,YAAP,CARS,CAST;AACD,GAXM,EAYNI,KAZM,CAYCC,GAAD,IAAO;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACD,GAfM,CAAP;AAgBD,CAlBI,C,CAmBP;;AACE,OAAO,MAAMC,aAAa,GAAE,MAAI;AAC9B,SAAO3B,QAAQ,CAACS,IAAT,GAAgBmB,OAAhB,GACNhB,IADM,CACDC,GAAG,IAAG;AACV,UAAMgB,aAAa,GAAG;AACpBV,MAAAA,UAAU,EAAG,KADO;AAEpBC,MAAAA,IAAI,EAAC,EAFe;AAGpBJ,MAAAA,KAAK,EAAC,EAHc;AAIpBK,MAAAA,KAAK,EAAE,EAJa;AAKpBS,MAAAA,OAAO,EAAE,KALW;AAMpBC,MAAAA,KAAK,EAAE;AANa,KAAtB;AAQA,WAAOF,aAAP;AACD,GAXM,EAYNP,KAZM,CAYCC,GAAD,IAAQ,CACd,CAbM,CAAP;AAcD,CAfM,C,CAiBT;;AACE,OAAO,MAAMS,cAAc,GAAG,MAAM;AAClC,QAAMC,UAAU,GAAG,IAAIjC,QAAQ,CAACS,IAAT,CAAcyB,oBAAlB,EAAnB;AACA,SAAOlC,QAAQ,CAACS,IAAT,GAAgBE,eAAhB,CAAgCsB,UAAhC,EACNrB,IADM,CACDC,GAAG,IAAI;AACX;AACA,QAAIsB,UAAU,GAAGtB,GAAG,CAACsB,UAAJ,CAAeC,WAAhC;AACA,QAAInB,IAAI,GAAGJ,GAAG,CAACI,IAAf;AACA,WAAOA,IAAP;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACD,GAPM,EAQNK,KARM,CAQCS,KAAD,IAAW;AAChB;AACA,QAAIM,SAAS,GAAGN,KAAK,CAACO,IAAtB;AACA,QAAIC,YAAY,GAAGR,KAAK,CAACL,OAAzB,CAHgB,CAIhB;;AACA,QAAIV,KAAK,GAAGe,KAAK,CAACf,KAAlB,CALgB,CAMhB;;AACA,QAAImB,UAAU,GAAGJ,KAAK,CAACI,UAAvB,CAPgB,CAShB;AACD,GAlBM,CAAP;AAoBD,CAtBM,C,CAyBT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseConfig from \"../Login/firebase.config\";\n\nexport const initializeLoginFremwork = () => {\n    if (!firebase.apps.length) {\n        firebase.initializeApp(firebaseConfig);\n     }else {\n        firebase.app(); \n     }\n}\nexport const handleGoogleSignIn =()=>{\n    const googleProvider = new firebase.auth.GoogleAuthProvider();\n    return firebase.auth().signInWithPopup(googleProvider)\n    .then(res=>{\n      const {displayName, photoURL, email} =res.user;\n      const singedInUser = {\n        isSignedIn : true,\n        name : displayName,\n        email : email,\n        photo : photoURL\n      }\n      return singedInUser;\n      // console.log(displayName, email, photoURL, )\n    })\n    .catch((err)=>{\n      console.log(err);\n      console.log(err.message)\n    })\n  }\n//google sign out\n  export const handleSignOut =()=>{\n    return firebase.auth().signOut()\n    .then(res =>{\n      const signedOutUser = {\n        isSignedIn : false,\n        name:'',\n        email:'',\n        photo: '',\n        success: false,\n        error: ''\n      }\n      return signedOutUser;\n    })\n    .catch((err) =>{\n    })\n  }\n\n// facebook login\n  export const handleFbSingUp = () => {\n    const fbProvider = new firebase.auth.FacebookAuthProvider();\n    return firebase.auth().signInWithPopup(fbProvider)\n    .then(res => {\n      //  @type {firebase.auth.OAuthCredential}\n      var credential = res.credential.accessToken;\n      var user = res.user;\n      return user;\n      console.log(user);\n    })\n    .catch((error) => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n  \n      // ...\n    });\n   \n  }\n\n\n// export const createUserWithEmailAndPassword = () => {\n//     firebase.auth().createUserWithEmailAndPassword(user.email, user.password)\n//       .then((res) => {\n//         const newUserInfo = {...user};\n//         newUserInfo.error = '';\n//         newUserInfo.success = true;\n//         setUser(newUserInfo);\n//         updateUserName(user.name);\n//       })\n//       .catch((error) => { \n//         const newUserInfo = {...user};\n//         newUserInfo.error = error.message;\n//         newUserInfo.success = false;\n//         setUser(newUserInfo);\n//       });\n// }\n\n// export const signInWithEmailAndPassword =()=>{\n//     firebase.auth().signInWithEmailAndPassword(user.email, user.password)\n//       .then((res) => {\n//         const newUserInfo = {...user};\n//         newUserInfo.error = '';\n//         newUserInfo.success = true;\n//         setUser(newUserInfo);\n//         setLoggedInUser(newUserInfo);\n//         history.replace(from);\n//         console.log( 'sign in user info', res.user);\n//       })\n//       .catch((error) => {\n//         const newUserInfo = {...user};\n//         newUserInfo.error = error.message;\n//         newUserInfo.success = false;\n//         setUser(newUserInfo);\n//       });\n// }\n// const updateUserName = name => {\n//     const user = firebase.auth().currentUser;\n  \n//       user.updateProfile({\n//         displayName: name,\n//       }).then(res => {\n//         // Update successful.\\\n//         console.log('Updated successfully')\n//       }).catch(error=> {\n//         // An error happened.\n//         console.log(error)\n//       });\n//   }"]},"metadata":{},"sourceType":"module"}